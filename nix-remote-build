#!/usr/bin/env bash

HOST=""
SOURCE=$(realpath ".")
BUILD_SYSTEM="generic"
FLAKE="."
SKIP_TESTS=0

TEST_FAILED=0

TMPDIR=""
RESULT=""

usage() {
    echo "Usage: --host=<hostname> --source=<Optional(source)> --build-system=<Optional(system)> --flake=<Optional(flake)> --skip-tests=<Optional(0|1)>"
    echo "
    flake is relative to the source directory

    build systems are:
    hm, nixos, shell, url (source can be set as nixpkgs#hello, github.com/FrederikRichter/nixvim etc)

    Default: generic
    will use current dir by default and use nix build
    "
    exit 1
}

parse_args() {
    # Parse command line arguments
    for arg in "$@"; do
        case $arg in
            --host=*)
                HOST="${arg#*=}"
                ;;
            --source=*)
                SOURCE=$"${arg#*=}"
                ;;
            --build-system=*)
                BUILD_SYSTEM="${arg#*=}"
                ;;
            --flake=*)
                FLAKE="${arg#*=}"
                ;;
            --skip-tests=*)
                SKIP_TESTS="${arg#*=}"
                ;;
            *)
                echo "some arguments have been ommited"
                echo "got $@"
                ;;
        esac
    done
    
    if [[ $BUILD_SYSTEM != "url" ]]; then
        BUILD_SYSTEM=$(realpath $BUILD_SYSTEM)
    fi

    # Check if all options are provided
    if [[ -z "$HOST" || -z "$SOURCE" || -z "$BUILD_SYSTEM" || -z "$FLAKE"  || -z "$SKIP_TESTS" ]]; then
        usage
    fi
    echo "using arguments"
    echo "Host: " $HOST
    echo "Source: " $SOURCE
    echo "Build system: " $BUILD_SYSTEM
    echo "Flake: " $FLAKE
    echo "Skip tests: " $SKIP_TESTS
}

check_source() {
    nix flake metadata $SOURCE || exit
}

check_connection() {
    echo "> Checking SSH connection to $HOST..."

    # Check SSH connection
    ssh $HOST "exit 0"
    if [ $? -ne 0 ]; then
        echo " [!] Unable to SSH on: $HOST"
        TEST_FAILED=1
    fi

    echo "SSH Connection: OK"

    # Check for write permission by attempting to create a temporary file
    ssh "$HOST" 'touch /tmp/test_write_permission && rm /tmp/test_write_permission'
    if [ $? -ne 0 ]; then
        echo " [!] Write permission denied on: $HOST"
        TEST_FAILED=1
    fi

    echo "Write permission: OK"

    # Check for required commands
    for cmd in nixos-rebuild home-manager nix; do
        ssh $HOST "command -v $cmd >/dev/null 2>&1"
        if [ $? -ne 0 ]; then
            echo " [!] Command $cmd not found on: $HOST"
            TEST_FAILED=1
        fi
    done

    echo "Commands: OK"


    ssh "$HOST" 'grep -q "experimental-features = nix-command flakes" /etc/nix/nix.conf && echo "Flakes are enabled."'
    if [ $? -ne 0 ]; then
        echo " [!] Flakes option not found in /etc/nix/nix.conf: $HOST"
        TEST_FAILED=1
    fi

    echo "Flake support: OK"


    if [[ $TEST_FAILED -eq 1 ]]; then
        echo "[!] At least one test failed, quitting ..."
        exit
    fi
    echo "All commands are available on: $HOST"
}

setup_tmp() {
    TMPDIR=$(ssh $HOST mktemp -d)
    echo $TMPDIR
}


get_result() {
if ssh -q "$HOST" "[[ -L \"$TMPDIR/result\" ]]"; then
    RESULT=$(ssh "$HOST" readlink "$TMPDIR/result")
    
    if [[ -z "$RESULT" ]]; then
        echo "Error: No result found for symlink at $TMPDIR/result, build failed."
        exit 1
    fi

    nix copy --no-require-sigs --from "ssh://$HOST" "$RESULT"

    if [[ "$BUILD_SYSTEM" != "url" ]]; then
        ln -sfn "$RESULT" "$SOURCE/result"
    else
        ln -sfn "$RESULT" "./result"
    fi
fi
}

run_hm() {
ssh "$HOST" <<EOF
cd "$TMPDIR"
home-manager build --impure --flake $FLAKE --show-trace
EOF
}

run_nixos() {
ssh "$HOST" <<EOF
cd "$TMPDIR"
nixos-rebuild build --flake $FLAKE --impure
EOF
}

run_shell(){
ssh "$HOST" <<EOF
cd "$TMPDIR"
nix-shell ./shell.nix
EOF
}

run_generic() {
ssh "$HOST" <<EOF
cd "$TMPDIR"
nix build $FLAKE --impure
EOF
}

run_url() {
ssh "$HOST" <<EOF
cd "$TMPDIR"
nix build $SOURCE --impure
EOF
}

remote_build() {

    if [[ $BUILD_SYSTEM != "url" ]]; then
        file_list=$(git --git-dir=$SOURCE/.git --work-tree=$SOURCE ls-files)
        rsync -v --mkpath --files-from=<(printf "%s\n" "${file_list[@]}") "$SOURCE" "$HOST:$TMPDIR/$file"
    fi

    case "$BUILD_SYSTEM" in
        hm)
            run_hm
            ;;
        nixos)
            run_nixos
            ;;
        shell)
            run_shell
            ;;
        url)
            run_url
            ;;
        generic)
            run_generic
            ;;
        *)
            echo "unknown build system $BUILD_SYSTEM, exiting..." && exit
        esac
}


parse_args "$@"

if [[ $BUILD_SYSTEM == "hm" || $BUILD_SYSTEM == "nixos" || $BUILD_SYSTEM == "generic" ]]; then
    check_source
fi

if [[ $SKIP_TESTS -eq 0 ]]; then
    check_connection
fi

setup_tmp && remote_build && get_result
